#!/bin/bash 

#make benchmark
#run 20 different random seeds to get some variation
#by default, 4 tests are run at the same time
#using the inbuild queue system
#paul.bauer@icm.uu.se
#as always, beer-ware license

set -e
QDIR=/data/work/q_source
BENCHMARKS=20
PARALLEL=4
RUNNING=0
wd=`pwd`
qbinary=$QDIR/bin/qdyn5
# Useful vars
OK="(\033[0;32m   OK   \033[0m)"
FAILED="(\033[0;31m FAILED \033[0m)"
if [ -z $qbinary ]
then
 echo "Please set the qbinary variable to point to the Q folder"
 exit 1
elif [ ! -x $qbinary ]
then
 echo "Can't locate qdyn in the $qbinary variable, or you don't have
       execute permisson."
 exit 1
else
 echo "Detected qdyn in ${QDIR}"
fi


function run_test() {
rm eq{1..5}.log dc{1..5}.log >& /dev/null

for step in {1..5}
do
 echo -n "Running equilibration step ${step} of 5                         "
 if $qbinary eq${step}.inp > eq${step}.log
 then echo -e "$OK"
 else
  echo -e "$FAILED"
  echo "Check output (eq${step}.log) for more info."
  exit 1
 fi
done

for step in {1..5}
do
 echo -n "Running production run step ${step} of 5                        "
 if $qbinary dc${step}.inp > dc${step}.log
  then echo -e "$OK"
 else
  echo -e "$FAILED"
  echo "Check output (dc${step}.log) for more info."
  exit 1
 fi
done
}

function wait_forend() {
sleep 60
for ((checkrun=$RUNNING;checkrun>=0;checkrun--)) ; do
if [ ! -d /proc/${RARRAY[${checkrun}]} ] ; then
#job has finished
#change array to account for jobs above

	for ((move=$checkrun;move<$RUNNING;move++)) ; do
		before=$(( $move + 1  ))
		RARRAY[$move]=${RAARRAY[$before]}
	done
	RUNNING=$(( $RUNNING -1 ))	
fi
done
}

for ((run=1;run<=$BENCHMARKS;run++)) ; do

rm -rf $wd/run-$run
mkdir $wd/run-$run
cp *inp $wd/run-$run
 
ln -s $wd/prep/lig_w.top $wd/run-$run/lig_w.top
ln -s $wd/prep/lig_w.fep $wd/run-$run/lig_w.fep

sed -i s/"random_seed.*1"/"random_seed                $RANDOM"/g $wd/run-$run/eq1.inp



cd $wd/run-$run

run_test &>logfile &
RARRAY[$RUNNING]=$$
RUNNING=$(( ${RUNNING} + 1 ))
cd $wd

if [ $RUNNING -eq $PARALLEL ] ; then
wait
for ((testr=$run;testr>=$(($run - $RUNNING + 1));testr--)) ; do
	err=`grep "terminated normally" $wd/run-$testr/dc5.log | wc -l`
	if [ $err -eq 0 ] ; then
	echo "Error during running of $wd/run-$testr"
	echo "Aborting tests"
	exit 666
	fi
done
RUNNING=0
fi

done


#Now get energies in nice arrays to prepare the new benchmark file
TARRAY=( `grep "Q-surr.*1 1.0000" $wd/run-1/eq*log $wd/run-1/dc*log | awk '{print $4}'` )
LENGTH=${#TARRAY[@]}
unset AVEL STEL AVLJ STLJ
for ((ave=0;ave<$LENGTH;ave++)) ; do
AVEL[$ave]=0
STEL[$ave]=0
AVLJ[$ave]=0
STLJ[$ave]=0
done
for ((run=1;run<=$BENCHMARKS;run++)) ; do
TARRAYEL=( `grep "Q-surr.*1 1.0000" $wd/run-$run/eq*log $wd/run-$run/dc*log | awk '{print $4}'` )
TARRAYLJ=( `grep "Q-surr.*1 1.0000" $wd/run-$run/eq*log $wd/run-$run/dc*log | awk '{print $5}'` )
for ((ave=0;ave<$LENGTH;ave++)) ; do
EARRAYEL[$run,$ave]=${TARRAYEL[$ave]}
EARRAYLJ[$run,$ave]=${TARRAYLJ[$ave]}
done
for ((ave=0;ave<$LENGTH;ave++)) ; do
AVEL[$ave]=$( echo "scale=3;${AVEL[$ave]} + ${EARRAYEL[$run,$ave]} " | bc -q)
STEL[$ave]=$( echo "scale=3;${STEL[$ave]} + (${EARRAYEL[$run,$ave]}*${EARRAYEL[$run,$ave]}) " | bc -q)
AVLJ[$ave]=$( echo "scale=3;${AVLJ[$ave]} + ${EARRAYLJ[$run,$ave]} " | bc -q)
STLJ[$ave]=$( echo "scale=3;${STLJ[$ave]} + (${EARRAYLJ[$run,$ave]}*${EARRAYLJ[$run,$ave]}) " | bc -q)
done
done
echo "#       el              vdw     
# step  Lower bound     Upper bound     Lower bound     Upper bound">$wd/qsurr_benchmark.en
for ((ave=0;ave<$LENGTH;ave++)) ; do

AVEL[$ave]=$( echo "scale=3;${AVEL[$ave]} / $BENCHMARKS" | bc -q)
AVLJ[$ave]=$( echo "scale=3;${AVLJ[$ave]} / $BENCHMARKS" | bc -q)


STEL[$ave]=$( echo "scale=3;sqrt( (${STEL[$ave]} / $BENCHMARKS) - ( ${AVEL[$ave]} * ${AVEL[$ave]} ))" | bc -q)
STLJ[$ave]=$( echo "scale=3;sqrt( (${STLJ[$ave]} / $BENCHMARKS) - ( ${AVLJ[$ave]} * ${AVLJ[$ave]} ))" | bc -q) 
UPPEREL[$ave]=$( echo "scale=3;${AVEL[$ave]} + ${STEL[$ave]}" | bc -q)
LOWEREL[$ave]=$( echo "scale=3;${AVEL[$ave]} - ${STEL[$ave]}" | bc -q)
UPPERLJ[$ave]=$( echo "scale=3;${AVLJ[$ave]} + ${STLJ[$ave]}" | bc -q)
LOWERLJ[$ave]=$( echo "scale=3;${AVLJ[$ave]} - ${STLJ[$ave]}" | bc -q)
NUM=$(( $ave + 1 ))
echo "$NUM	${LOWEREL[$ave]} ${UPPEREL[$ave]} ${LOWERLJ[$ave]} ${UPPERLJ[$ave]}">>$wd/qsurr_benchmark.en
done


